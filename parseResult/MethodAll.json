[{"belongClass":"java.applet.Applet","description":"Read an applet from an object input stream.","methodName":"java.applet.Applet.readObject(java.io.ObjectInputStream)","modifierList":["private"],"name":"readObject(ObjectInputStream s)","parameter":["ObjectInputStream s"],"parameterTypeList":["java.io.ObjectInputStream"],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":["java.lang.ClassNotFoundException","java.io.IOException","java.awt.HeadlessException"],"throwsCodeDirective":[{"key":"HeadlessException","value":"GraphicsEnvironment.isHeadless()"}],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Sets this applet's stub. This is done automatically by the system.\r\n<p>If there is a security manager, its <code> checkPermission </code>\r\nmethod is called with the\r\n<code>AWTPermission(\"setAppletStub\")</code>\r\npermission if a stub has already been set.","methodName":"java.applet.Applet.setStub(java.applet.AppletStub)","modifierList":["public","final"],"name":"setStub(AppletStub stub)","parameter":["AppletStub stub"],"parameterTypeList":["java.applet.AppletStub"],"paramsTag":[{"key":"stub","value":"the new stub."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Determines if this applet is active. An applet is marked active\r\njust before its <code>start</code> method is called. It becomes\r\ninactive just before its <code>stop</code> method is called.","methodName":"java.applet.Applet.isActive()","modifierList":["public"],"name":"isActive()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"<code>true</code> if the applet is active;\r\n         <code>false</code> otherwise.","returnValueType":"java.lang.Boolean","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Gets the URL of the document in which this applet is embedded.\r\nFor example, suppose an applet is contained\r\nwithin the document:\r\n<blockquote><pre>\r\n   http://www.oracle.com/technetwork/java/index.html\r\n</pre></blockquote>\r\nThe document base is:\r\n<blockquote><pre>\r\n   http://www.oracle.com/technetwork/java/index.html\r\n</pre></blockquote>","methodName":"java.applet.Applet.getDocumentBase()","modifierList":["public"],"name":"getDocumentBase()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"the {@link java.net.URL} of the document that contains this\r\n         applet.","returnValueType":"java.net.URL","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Gets the base URL. This is the URL of the directory which contains this applet.","methodName":"java.applet.Applet.getCodeBase()","modifierList":["public"],"name":"getCodeBase()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"the base {@link java.net.URL} of\r\n         the directory which contains this applet.","returnValueType":"java.net.URL","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Returns the value of the named parameter in the HTML tag. For\r\nexample, if this applet is specified as\r\n<blockquote><pre>\r\n&lt;applet code=\"Clock\" width=50 height=50&gt;\r\n&lt;param name=Color value=\"blue\"&gt;\r\n&lt;/applet&gt;\r\n</pre></blockquote>\r\n<p>\r\nthen a call to <code>getParameter(\"Color\")</code> returns the\r\nvalue <code>\"blue\"</code>.\r\n<p>\r\nThe <code>name</code> argument is case insensitive.","methodName":"java.applet.Applet.getParameter(java.lang.String)","modifierList":["public"],"name":"getParameter(String name)","parameter":["String name"],"parameterTypeList":["java.lang.String"],"paramsTag":[{"key":"name","value":"a parameter name."}],"returnCodeDirective":[],"returnValueDescription":"the value of the named parameter,\r\n         or <code>null</code> if not set.","returnValueType":"java.lang.String","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Determines this applet's context, which allows the applet to\r\nquery and affect the environment in which it runs.\r\n<p>\r\nThis environment of an applet represents the document that\r\ncontains the applet.","methodName":"java.applet.Applet.getAppletContext()","modifierList":["public"],"name":"getAppletContext()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"the applet's context.","returnValueType":"java.applet.AppletContext","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Requests that this applet be resized.","methodName":"java.applet.Applet.resize(int, int)","modifierList":["public"],"name":"resize(int width, int height)","parameter":["int width","int height"],"parameterTypeList":["int"," int"],"paramsTag":[{"key":"width","value":"the new requested width for the applet."},{"key":"height","value":"the new requested height for the applet."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Requests that this applet be resized.","methodName":"java.applet.Applet.resize(java.awt.Dimension)","modifierList":["public"],"name":"resize(Dimension d)","parameter":["Dimension d"],"parameterTypeList":["java.awt.Dimension"],"paramsTag":[{"key":"d","value":"an object giving the new width and height."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Indicates if this container is a validate root.\r\n<p>\r\n{@code Applet} objects are the validate roots, and, therefore, they\r\noverride this method to return {@code true}.","methodName":"java.applet.Applet.isValidateRoot()","modifierList":["public"],"name":"isValidateRoot()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"{@code true}","returnValueType":"java.lang.Boolean","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Requests that the argument string be displayed in the\r\n\"status window\". Many browsers and applet viewers\r\nprovide such a window, where the application can inform users of\r\nits current state.","methodName":"java.applet.Applet.showStatus(java.lang.String)","modifierList":["public"],"name":"showStatus(String msg)","parameter":["String msg"],"parameterTypeList":["java.lang.String"],"paramsTag":[{"key":"msg","value":"a string to display in the status window."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Returns an <code>Image</code> object that can then be painted on\r\nthe screen. The <code>url</code> that is passed as an argument\r\nmust specify an absolute URL.\r\n<p>\r\nThis method always returns immediately, whether or not the image\r\nexists. When this applet attempts to draw the image on the screen,\r\nthe data will be loaded. The graphics primitives that draw the\r\nimage will incrementally paint on the screen.","methodName":"java.applet.Applet.getImage(java.net.URL)","modifierList":["public"],"name":"getImage(URL url)","parameter":["URL url"],"parameterTypeList":["java.net.URL"],"paramsTag":[{"key":"url","value":"an absolute URL giving the location of the image."}],"returnCodeDirective":[],"returnValueDescription":"the image at the specified URL.","returnValueType":"java.awt.Image","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Returns an <code>Image</code> object that can then be painted on\r\nthe screen. The <code>url</code> argument must specify an absolute\r\nURL. The <code>name</code> argument is a specifier that is\r\nrelative to the <code>url</code> argument.\r\n<p>\r\nThis method always returns immediately, whether or not the image\r\nexists. When this applet attempts to draw the image on the screen,\r\nthe data will be loaded. The graphics primitives that draw the\r\nimage will incrementally paint on the screen.","methodName":"java.applet.Applet.getImage(java.net.URL, java.lang.String)","modifierList":["public"],"name":"getImage(URL url, String name)","parameter":["URL url","String name"],"parameterTypeList":["java.net.URL"," java.lang.String"],"paramsTag":[{"key":"url","value":"an absolute URL giving the base location of the image."},{"key":"name","value":"the location of the image, relative to the\r\n                <code>url</code> argument."}],"returnCodeDirective":[],"returnValueDescription":"the image at the specified URL.","returnValueType":"java.awt.Image","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Get an audio clip from the given URL.","methodName":"java.applet.Applet.newAudioClip(java.net.URL)","modifierList":["public","final","static"],"name":"newAudioClip(URL url)","parameter":["URL url"],"parameterTypeList":["java.net.URL"],"paramsTag":[{"key":"url","value":"points to the audio clip"}],"returnCodeDirective":[],"returnValueDescription":"the audio clip at the specified URL.","returnValueType":"java.applet.AudioClip","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Returns the <code>AudioClip</code> object specified by the\r\n<code>URL</code> argument.\r\n<p>\r\nThis method always returns immediately, whether or not the audio\r\nclip exists. When this applet attempts to play the audio clip, the\r\ndata will be loaded.","methodName":"java.applet.Applet.getAudioClip(java.net.URL)","modifierList":["public"],"name":"getAudioClip(URL url)","parameter":["URL url"],"parameterTypeList":["java.net.URL"],"paramsTag":[{"key":"url","value":"an absolute URL giving the location of the audio clip."}],"returnCodeDirective":[],"returnValueDescription":"the audio clip at the specified URL.","returnValueType":"java.applet.AudioClip","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Returns the <code>AudioClip</code> object specified by the\r\n<code>URL</code> and <code>name</code> arguments.\r\n<p>\r\nThis method always returns immediately, whether or not the audio\r\nclip exists. When this applet attempts to play the audio clip, the\r\ndata will be loaded.","methodName":"java.applet.Applet.getAudioClip(java.net.URL, java.lang.String)","modifierList":["public"],"name":"getAudioClip(URL url, String name)","parameter":["URL url","String name"],"parameterTypeList":["java.net.URL"," java.lang.String"],"paramsTag":[{"key":"url","value":"an absolute URL giving the base location of the\r\n                audio clip."},{"key":"name","value":"the location of the audio clip, relative to the\r\n                <code>url</code> argument."}],"returnCodeDirective":[],"returnValueDescription":"the audio clip at the specified URL.","returnValueType":"java.applet.AudioClip","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Returns information about this applet. An applet should override\r\nthis method to return a <code>String</code> containing information\r\nabout the author, version, and copyright of the applet.\r\n<p>\r\nThe implementation of this method provided by the\r\n<code>Applet</code> class returns <code>null</code>.","methodName":"java.applet.Applet.getAppletInfo()","modifierList":["public"],"name":"getAppletInfo()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"a string containing information about the author, version, and\r\n         copyright of the applet.","returnValueType":"java.lang.String","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Gets the locale of the applet. It allows the applet\r\nto maintain its own locale separated from the locale\r\nof the browser or appletviewer.","methodName":"java.applet.Applet.getLocale()","modifierList":["public"],"name":"getLocale()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"the locale of the applet; if no locale has\r\n         been set, the default locale is returned.","returnValueType":"java.util.Locale","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Returns information about the parameters that are understood by\r\nthis applet. An applet should override this method to return an\r\narray of <code>Strings</code> describing these parameters.\r\n<p>\r\nEach element of the array should be a set of three\r\n<code>Strings</code> containing the name, the type, and a\r\ndescription. For example:\r\n<blockquote><pre>\r\nString pinfo[][] = {\r\n  {\"fps\",    \"1-10\",    \"frames per second\"},\r\n  {\"repeat\", \"boolean\", \"repeat image loop\"},\r\n  {\"imgs\",   \"url\",     \"images directory\"}\r\n};\r\n</pre></blockquote>\r\n<p>\r\nThe implementation of this method provided by the\r\n<code>Applet</code> class returns <code>null</code>.","methodName":"java.applet.Applet.getParameterInfo()","modifierList":["public"],"name":"getParameterInfo()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"an array describing the parameters this applet looks for.","returnValueType":"java.lang.String[][]","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Plays the audio clip at the specified absolute URL. Nothing\r\nhappens if the audio clip cannot be found.","methodName":"java.applet.Applet.play(java.net.URL)","modifierList":["public"],"name":"play(URL url)","parameter":["URL url"],"parameterTypeList":["java.net.URL"],"paramsTag":[{"key":"url","value":"an absolute URL giving the location of the audio clip."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Plays the audio clip given the URL and a specifier that is\r\nrelative to it. Nothing happens if the audio clip cannot be found.","methodName":"java.applet.Applet.play(java.net.URL, java.lang.String)","modifierList":["public"],"name":"play(URL url, String name)","parameter":["URL url","String name"],"parameterTypeList":["java.net.URL"," java.lang.String"],"paramsTag":[{"key":"url","value":"an absolute URL giving the base location of the\r\n                audio clip."},{"key":"name","value":"the location of the audio clip, relative to the\r\n                <code>url</code> argument."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Called by the browser or applet viewer to inform\r\nthis applet that it has been loaded into the system. It is always\r\ncalled before the first time that the <code>start</code> method is\r\ncalled.\r\n<p>\r\nA subclass of <code>Applet</code> should override this method if\r\nit has initialization to perform. For example, an applet with\r\nthreads would use the <code>init</code> method to create the\r\nthreads and the <code>destroy</code> method to kill them.\r\n<p>\r\nThe implementation of this method provided by the\r\n<code>Applet</code> class does nothing.","methodName":"java.applet.Applet.init()","modifierList":["public"],"name":"init()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Called by the browser or applet viewer to inform\r\nthis applet that it should start its execution. It is called after\r\nthe <code>init</code> method and each time the applet is revisited\r\nin a Web page.\r\n<p>\r\nA subclass of <code>Applet</code> should override this method if\r\nit has any operation that it wants to perform each time the Web\r\npage containing it is visited. For example, an applet with\r\nanimation might want to use the <code>start</code> method to\r\nresume animation, and the <code>stop</code> method to suspend the\r\nanimation.\r\n<p>\r\nNote: some methods, such as <code>getLocationOnScreen</code>, can only\r\nprovide meaningful results if the applet is showing.  Because\r\n<code>isShowing</code> returns <code>false</code> when the applet's\r\n<code>start</code> is first called, methods requiring\r\n<code>isShowing</code> to return <code>true</code> should be called from\r\na <code>ComponentListener</code>.\r\n<p>\r\nThe implementation of this method provided by the\r\n<code>Applet</code> class does nothing.","methodName":"java.applet.Applet.start()","modifierList":["public"],"name":"start()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Called by the browser or applet viewer to inform\r\nthis applet that it should stop its execution. It is called when\r\nthe Web page that contains this applet has been replaced by\r\nanother page, and also just before the applet is to be destroyed.\r\n<p>\r\nA subclass of <code>Applet</code> should override this method if\r\nit has any operation that it wants to perform each time the Web\r\npage containing it is no longer visible. For example, an applet\r\nwith animation might want to use the <code>start</code> method to\r\nresume animation, and the <code>stop</code> method to suspend the\r\nanimation.\r\n<p>\r\nThe implementation of this method provided by the\r\n<code>Applet</code> class does nothing.","methodName":"java.applet.Applet.stop()","modifierList":["public"],"name":"stop()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Called by the browser or applet viewer to inform\r\nthis applet that it is being reclaimed and that it should destroy\r\nany resources that it has allocated. The <code>stop</code> method\r\nwill always be called before <code>destroy</code>.\r\n<p>\r\nA subclass of <code>Applet</code> should override this method if\r\nit has any operation that it wants to perform before it is\r\ndestroyed. For example, an applet with threads would use the\r\n<code>init</code> method to create the threads and the\r\n<code>destroy</code> method to kill them.\r\n<p>\r\nThe implementation of this method provided by the\r\n<code>Applet</code> class does nothing.","methodName":"java.applet.Applet.destroy()","modifierList":["public"],"name":"destroy()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Gets the AccessibleContext associated with this Applet.\r\nFor applets, the AccessibleContext takes the form of an\r\nAccessibleApplet.\r\nA new AccessibleApplet instance is created if necessary.","methodName":"java.applet.Applet.getAccessibleContext()","modifierList":["public"],"name":"getAccessibleContext()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"an AccessibleApplet that serves as the\r\n        AccessibleContext of this Applet","returnValueType":"javax.accessibility.AccessibleContext","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet.AccessibleApplet","description":"Get the role of this object.","methodName":"java.applet.Applet.AccessibleApplet.getAccessibleRole()","modifierList":["public"],"name":"getAccessibleRole()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"an instance of AccessibleRole describing the role of the\r\nobject","returnValueType":"javax.accessibility.AccessibleRole","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet.AccessibleApplet","description":"Get the state of this object.","methodName":"java.applet.Applet.AccessibleApplet.getAccessibleStateSet()","modifierList":["public"],"name":"getAccessibleStateSet()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"an instance of AccessibleStateSet containing the current\r\nstate set of the object","returnValueType":"javax.accessibility.AccessibleStateSet","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.Applet","description":"Constructs a new Applet.\r\n<p>\r\nNote: Many methods in <code>java.applet.Applet</code>\r\nmay be invoked by the applet only after the applet is\r\nfully constructed; applet should avoid calling methods\r\nin <code>java.applet.Applet</code> in the constructor.","methodName":"java.applet.Applet.Applet()","name":"Applet()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnValueDescription":"","returnValueType":"java.applet.Applet","throwException":["java.awt.HeadlessException"],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Creates an audio clip.","methodName":"java.applet.AppletContext.getAudioClip(java.net.URL)","modifierList":[],"name":"getAudioClip(URL url)","parameter":["URL url"],"parameterTypeList":["java.net.URL"],"paramsTag":[{"key":"url","value":"an absolute URL giving the location of the audio clip."}],"returnCodeDirective":[],"returnValueDescription":"the audio clip at the specified URL.","returnValueType":"java.applet.AudioClip","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Returns an <code>Image</code> object that can then be painted on\r\nthe screen. The <code>url</code> argument that is\r\npassed as an argument must specify an absolute URL.\r\n<p>\r\nThis method always returns immediately, whether or not the image\r\nexists. When the applet attempts to draw the image on the screen,\r\nthe data will be loaded. The graphics primitives that draw the\r\nimage will incrementally paint on the screen.","methodName":"java.applet.AppletContext.getImage(java.net.URL)","modifierList":[],"name":"getImage(URL url)","parameter":["URL url"],"parameterTypeList":["java.net.URL"],"paramsTag":[{"key":"url","value":"an absolute URL giving the location of the image."}],"returnCodeDirective":[],"returnValueDescription":"the image at the specified URL.","returnValueType":"java.awt.Image","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Finds and returns the applet in the document represented by this\r\napplet context with the given name. The name can be set in the\r\nHTML tag by setting the <code>name</code> attribute.","methodName":"java.applet.AppletContext.getApplet(java.lang.String)","modifierList":[],"name":"getApplet(String name)","parameter":["String name"],"parameterTypeList":["java.lang.String"],"paramsTag":[{"key":"name","value":"an applet name."}],"returnCodeDirective":[],"returnValueDescription":"the applet with the given name, or <code>null</code> if\r\n         not found.","returnValueType":"java.applet.Applet","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Finds all the applets in the document represented by this applet\r\ncontext.","methodName":"java.applet.AppletContext.getApplets()","modifierList":[],"name":"getApplets()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"an enumeration of all applets in the document represented by\r\n         this applet context.","returnValueType":"java.util.Enumeration","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Requests that the browser or applet viewer show the Web page\r\nindicated by the <code>url</code> argument. The browser or\r\napplet viewer determines which window or frame to display the\r\nWeb page. This method may be ignored by applet contexts that\r\nare not browsers.","methodName":"java.applet.AppletContext.showDocument(java.net.URL)","modifierList":[],"name":"showDocument(URL url)","parameter":["URL url"],"parameterTypeList":["java.net.URL"],"paramsTag":[{"key":"url","value":"an absolute URL giving the location of the document."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Requests that the browser or applet viewer show the Web page\r\nindicated by the <code>url</code> argument. The\r\n<code>target</code> argument indicates in which HTML frame the\r\ndocument is to be displayed.\r\nThe target argument is interpreted as follows:\r\n\r\n<center><table border=\"3\" summary=\"Target arguments and their descriptions\">\r\n<tr><th>Target Argument</th><th>Description</th></tr>\r\n<tr><td><code>\"_self\"</code>  <td>Show in the window and frame that\r\n                                  contain the applet.</tr>\r\n<tr><td><code>\"_parent\"</code><td>Show in the applet's parent frame. If\r\n                                  the applet's frame has no parent frame,\r\n                                  acts the same as \"_self\".</tr>\r\n<tr><td><code>\"_top\"</code>   <td>Show in the top-level frame of the applet's\r\n                                  window. If the applet's frame is the\r\n                                  top-level frame, acts the same as \"_self\".</tr>\r\n<tr><td><code>\"_blank\"</code> <td>Show in a new, unnamed\r\n                                  top-level window.</tr>\r\n<tr><td><i>name</i><td>Show in the frame or window named <i>name</i>. If\r\n                       a target named <i>name</i> does not already exist, a\r\n                       new top-level window with the specified name is created,\r\n                       and the document is shown there.</tr>\r\n</table> </center>\r\n<p>\r\nAn applet viewer or browser is free to ignore <code>showDocument</code>.","methodName":"java.applet.AppletContext.showDocument(java.net.URL, java.lang.String)","modifierList":["public"],"name":"showDocument(URL url, String target)","parameter":["URL url","String target"],"parameterTypeList":["java.net.URL"," java.lang.String"],"paramsTag":[{"key":"url","value":"an absolute URL giving the location of the document."},{"key":"target","value":"a <code>String</code> indicating where to display\r\n                  the page."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Requests that the argument string be displayed in the\r\n\"status window\". Many browsers and applet viewers\r\nprovide such a window, where the application can inform users of\r\nits current state.","methodName":"java.applet.AppletContext.showStatus(java.lang.String)","modifierList":[],"name":"showStatus(String status)","parameter":["String status"],"parameterTypeList":["java.lang.String"],"paramsTag":[{"key":"status","value":"a string to display in the status window."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Associates the specified stream with the specified key in this\r\napplet context. If the applet context previously contained a mapping\r\nfor this key, the old value is replaced.\r\n<p>\r\nFor security reasons, mapping of streams and keys exists for each\r\ncodebase. In other words, applet from one codebase cannot access\r\nthe streams created by an applet from a different codebase\r\n<p>","methodName":"java.applet.AppletContext.setStream(java.lang.String, java.io.InputStream)","modifierList":["public"],"name":"setStream(String key, InputStream stream)","parameter":["String key","InputStream stream"],"parameterTypeList":["java.lang.String"," java.io.InputStream"],"paramsTag":[{"key":"key","value":"key with which the specified value is to be associated."},{"key":"stream","value":"stream to be associated with the specified key. If this\r\n              parameter is <code>null</code>, the specified key is removed\r\n              in this applet context."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":["java.io.IOException"],"throwsCodeDirective":[],"throwsTag":[{"key":"IOException","value":"if the stream size exceeds a certain\r\n        size limit. Size limit is decided by the implementor of this\r\n        interface."}]},{"belongClass":"java.applet.AppletContext","description":"Returns the stream to which specified key is associated within this\r\napplet context. Returns <tt>null</tt> if the applet context contains\r\nno stream for this key.\r\n<p>\r\nFor security reasons, mapping of streams and keys exists for each\r\ncodebase. In other words, applet from one codebase cannot access\r\nthe streams created by an applet from a different codebase\r\n<p>","methodName":"java.applet.AppletContext.getStream(java.lang.String)","modifierList":["public"],"name":"getStream(String key)","parameter":["String key"],"parameterTypeList":["java.lang.String"],"paramsTag":[{"key":"key","value":"key whose associated stream is to be returned."}],"returnCodeDirective":[],"returnValueDescription":"the stream to which this applet context maps the key","returnValueType":"java.io.InputStream","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletContext","description":"Finds all the keys of the streams in this applet context.\r\n<p>\r\nFor security reasons, mapping of streams and keys exists for each\r\ncodebase. In other words, applet from one codebase cannot access\r\nthe streams created by an applet from a different codebase\r\n<p>","methodName":"java.applet.AppletContext.getStreamKeys()","modifierList":["public"],"name":"getStreamKeys()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"an Iterator of all the names of the streams in this applet\r\n         context.","returnValueType":"java.util.Iterator","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletStub","description":"Determines if the applet is active. An applet is active just\r\nbefore its <code>start</code> method is called. It becomes\r\ninactive just before its <code>stop</code> method is called.","methodName":"java.applet.AppletStub.isActive()","modifierList":[],"name":"isActive()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"<code>true</code> if the applet is active;\r\n         <code>false</code> otherwise.","returnValueType":"java.lang.Boolean","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletStub","description":"Gets the URL of the document in which the applet is embedded.\r\nFor example, suppose an applet is contained\r\nwithin the document:\r\n<blockquote><pre>\r\n   http://www.oracle.com/technetwork/java/index.html\r\n</pre></blockquote>\r\nThe document base is:\r\n<blockquote><pre>\r\n   http://www.oracle.com/technetwork/java/index.html\r\n</pre></blockquote>","methodName":"java.applet.AppletStub.getDocumentBase()","modifierList":[],"name":"getDocumentBase()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"the {@link java.net.URL} of the document that contains the\r\n         applet.","returnValueType":"java.net.URL","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletStub","description":"Gets the base URL. This is the URL of the directory which contains the applet.","methodName":"java.applet.AppletStub.getCodeBase()","modifierList":[],"name":"getCodeBase()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"the base {@link java.net.URL} of\r\n         the directory which contains the applet.","returnValueType":"java.net.URL","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletStub","description":"Returns the value of the named parameter in the HTML tag. For\r\nexample, if an applet is specified as\r\n<blockquote><pre>\r\n&lt;applet code=\"Clock\" width=50 height=50&gt;\r\n&lt;param name=Color value=\"blue\"&gt;\r\n&lt;/applet&gt;\r\n</pre></blockquote>\r\n<p>\r\nthen a call to <code>getParameter(\"Color\")</code> returns the\r\nvalue <code>\"blue\"</code>.","methodName":"java.applet.AppletStub.getParameter(java.lang.String)","modifierList":[],"name":"getParameter(String name)","parameter":["String name"],"parameterTypeList":["java.lang.String"],"paramsTag":[{"key":"name","value":"a parameter name."}],"returnCodeDirective":[],"returnValueDescription":"the value of the named parameter,\r\nor <tt>null</tt> if not set.","returnValueType":"java.lang.String","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletStub","description":"Returns the applet's context.","methodName":"java.applet.AppletStub.getAppletContext()","modifierList":[],"name":"getAppletContext()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"the applet's context.","returnValueType":"java.applet.AppletContext","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AppletStub","description":"Called when the applet wants to be resized.","methodName":"java.applet.AppletStub.appletResize(int, int)","modifierList":[],"name":"appletResize(int width, int height)","parameter":["int width","int height"],"parameterTypeList":["int"," int"],"paramsTag":[{"key":"width","value":"the new requested width for the applet."},{"key":"height","value":"the new requested height for the applet."}],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AudioClip","description":"Starts playing this audio clip. Each time this method is called,\r\nthe clip is restarted from the beginning.","methodName":"java.applet.AudioClip.play()","modifierList":[],"name":"play()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AudioClip","description":"Starts playing this audio clip in a loop.","methodName":"java.applet.AudioClip.loop()","modifierList":[],"name":"loop()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]},{"belongClass":"java.applet.AudioClip","description":"Stops playing this audio clip.","methodName":"java.applet.AudioClip.stop()","modifierList":[],"name":"stop()","parameter":[],"parameterTypeList":[""],"paramsTag":[],"returnCodeDirective":[],"returnValueDescription":"","returnValueType":"void","throwException":[],"throwsCodeDirective":[],"throwsTag":[]}]